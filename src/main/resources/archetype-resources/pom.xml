<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>${groupId}</groupId>
	<artifactId>${artifactId}</artifactId>
	<version>${version}</version>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <root.package>${groupId}</root.package>
		<commons-lang3.version>3.5</commons-lang3.version>
		<log4j.version>1.2.17</log4j.version>
		<java.version>1.8</java.version>
		<!-- Plugins -->
		<maven.compiler.plugin.version>3.6.1</maven.compiler.plugin.version>
		<maven.surefire.plugin.version>2.19</maven.surefire.plugin.version>
		<maven.dependency.plugin.version>3.0.1</maven.dependency.plugin.version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<acceptance.tests>${groupId}.acceptancetests/**/*.java</acceptance.tests>
        <skipTests>false</skipTests>
        <maven.surefire.version>2.19.1</maven.surefire.version>
        <required.maven.version>3.0.5</required.maven.version>
        <junit.version>4.12</junit.version>
        <mockito.version>1.10.19</mockito.version>
        <assertj.version>3.4.1</assertj.version>
        <yatspec.version>1.22</yatspec.version>
    </properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!--surefire-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.20.1</version>
				<executions>
					<execution>
						<id>surefire-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>test</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--jar-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.0.2</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${groupId}.Application</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<!--uber-jar-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>single</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<finalName>${artifactId}</finalName>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<archive>
								<manifest>
									<mainClass>${groupId}.Application</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--eclipse-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
				</configuration>
			</plugin>
			<!--exec-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<mainClass>Main</mainClass>
				</configuration>
			</plugin>
			<!--fabric8-->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.24.0</version>
				<configuration>
					<images>
						<image>
							<name>loan-calculator</name>
							<alias>loan-calculator-app</alias>
							<build>
								<dockerFileDir>${project.basedir}</dockerFileDir>
							</build>
							<run>
								<namingStrategy>alias</namingStrategy>
							</run>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>remove-dev-image</id>
						<phase>clean</phase>
						<goals>
							<goal>remove</goal>
						</goals>
						<configuration>
							<removeMode>all</removeMode>
						</configuration>
					</execution>
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<id>start-image</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop-image</id>
						<phase>none</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


    <profiles>
        <!-- Main build -->
        <profile>
            <id>main</id>
            <activation>
                <property>
                    <name>!isolated</name><!-- Profile is active unless -Disolated is specified -->
                </property>
            </activation>
            <build>
                <plugins>

                    <!-- Shade is used to package an uber JAR which contains all the dependencies -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-shade-plugin</artifactId>
                        <version>2.4.3</version>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>shade</goal>
                                </goals>
                                <configuration>
                                    <filters>
                                        <filter>
                                            <!-- This artifact has stupidly copy-pasted some classes that conflict with the JARs that the classes were copy pasted from, so we should exclude them -->
                                            <artifact>com.google.code.findbugs:annotations</artifact>
                                            <excludes>
                                                <exclude>javax/annotation/**</exclude>
                                                <exclude>net/jcip/annotations/**</exclude>
                                            </excludes>
                                        </filter>
                                    </filters>
                                    <transformers>
                                        <!-- Add Main-Class to manifest file -->
                                        <transformer
                                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                            <mainClass>${root.package}.Application</mainClass>
                                        </transformer>
                                    </transformers>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Unit Tests -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>${maven.surefire.version}</version>
                        <configuration>
                            <runOrder>failedfirst</runOrder>
                            <trimStackTrace>false</trimStackTrace>
                            <systemPropertyVariables>
                                <log4j.log.dir>${project.build.directory}/surefire-reports/logs</log4j.log.dir>
                                <yatspec.output.dir>${project.build.directory}/surefire-reports/yatspec</yatspec.output.dir>
                            </systemPropertyVariables>
                            <environmentVariables>
                                <NAMESPACE>surefireunittests</NAMESPACE>
                            </environmentVariables>
                        </configuration>
                        <executions>
                            <execution>
                                <id>default-test</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <excludes>
                                        <exclude>${acceptance.tests}</exclude>
                                    </excludes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Build docker container -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.24.0</version>
                        <configuration>
                            <images>
                                <image>
                                    <name>loan-calculator</name>
                                    <alias>loan-calculator-app</alias>
                                    <build>
                                        <dockerFileDir>${project.basedir}</dockerFileDir>
                                    </build>
                                    <run>
                                        <namingStrategy>alias</namingStrategy>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>remove-dev-image</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>remove</goal>
                                </goals>
                                <configuration>
                                    <removeMode>all</removeMode>
                                </configuration>
                            </execution>
                            <execution>
                                <id>build-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>start-image</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop-image</id>
                                <phase>none</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!--acceptance tests-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven.surefire.version}</version>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.maven.surefire</groupId>
                                <artifactId>surefire-junit47</artifactId>
                                <version>${maven.surefire.version}</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>integration-test</id>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <trimStackTrace>false</trimStackTrace>
                                    <!-- Ensure that the integration tests do not rely on any production code -->
                                    <classpathDependencyScopeExclude>compile</classpathDependencyScopeExclude>
                                    <systemPropertyVariables>
                                        <project.version>${project.version}</project.version>
                                        <yatspec.output.dir>${project.build.directory}/failsafe-reports/yatspec</yatspec.output.dir>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <includes>
                                <include>${acceptance.tests}</include>
                            </includes>
                        </configuration>
                    </plugin>

                    <!-- Static Analysis -->
                    <!-- Package cycle detection -->
                    <!-- NOTE: keep this above check-there-were-no-package-cycles because they are in the same phase :( -->
                    <!-- Raised https://github.com/hcoles/highwheel/issues/5 for this -->
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>highwheel-maven</artifactId>
                        <version>1.2</version>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>analyse</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Enforce various rules about the project by failing the build if they are violated -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <version>1.4.1</version>
                        <configuration>
                            <fail>true</fail>
                        </configuration>
                        <executions>
                            <execution>
                                <id>${project.artifactId} Dependency Convergence</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <dependencyConvergence/><!-- This ensures that there is no ambiguity in the versions that are used -->
                                        <requireUpperBoundDeps/><!-- This ensures that the versions used are at least as recent as the transitive versions -->
                                    </rules>
                                </configuration>
                            </execution>
                            <execution>
                                <id>${project.artifactId} Banned Dependencies</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <bannedDependencies>
                                            <excludes>
                                                <exclude>xerces:xercesImpl</exclude><!-- We only use the XML parser that comes with the JDK -->
                                                <exclude>junit:junit-dep</exclude><!-- We only use junit:junit -->
                                                <exclude>javax.servlet:servlet-api</exclude><!-- Artifact was renamed to javax.servlet-api -->
                                            </excludes>
                                        </bannedDependencies>
                                    </rules>
                                </configuration>
                            </execution>
                            <execution>
                                <id>${project.artifactId} Required Maven Version</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <requireMavenVersion>
                                            <version>${required.maven.version}</version>
                                        </requireMavenVersion>
                                    </rules>
                                </configuration>
                            </execution>
                            <execution>
                                <!-- NOTE: Keep this below highwheel-maven because they are in the same phase :( -->
                                <!-- Raised https://github.com/hcoles/highwheel/issues/5 for this -->
                                <id>check-there-were-no-package-cycles</id>
                                <phase>none</phase><!-- TODO: MON-256 enable again! -->
                                <!--<phase>verify</phase>-->
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <requireFilesDontExist>
                                            <message>There are package cycles. See the report at ${project.build.directory}/highwheel/index.html</message>
                                            <files>
                                                <file>${project.build.directory}/highwheel/package_tangle_1.html</file>
                                            </files>
                                        </requireFilesDontExist>
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Check for conflicting class files in the uber JAR that have different content -->
                    <plugin>
                        <groupId>org.basepom.maven</groupId>
                        <artifactId>duplicate-finder-maven-plugin</artifactId>
                        <version>1.2.0</version>
                        <configuration>
                            <checkTestClasspath>false</checkTestClasspath>
                            <failBuildInCaseOfDifferentContentConflict>true</failBuildInCaseOfDifferentContentConflict>
                        </configuration>
                        <executions>
                            <execution>
                                <id>check-for-duplicate-class-files</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Enable default lifecycle -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-compile</id>
                                <phase>compile</phase>
                            </execution>
                            <execution>
                                <id>default-testCompile</id>
                                <phase>test-compile</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>default-resources</id>
                                <phase>process-resources</phase>
                            </execution>
                            <execution>
                                <id>default-testResources</id>
                                <phase>process-test-resources</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-jar</id>
                                <phase>package</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- PMD static analysis tool that inspects the source code to look for known bugs and suspicious code -->
        <profile>
            <id>pmd</id>
            <activation>
                <property>
                    <name>!isolated</name><!-- Profile is active unless -Disolated is specified -->
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jxr-plugin</artifactId>
                        <version>2.5</version>
                        <executions>
                            <execution>
                                <id>run-jxr</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>jxr</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-pmd-plugin</artifactId>
                        <version>3.6</version>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <printFailingErrors>true</printFailingErrors>
                            <targetJdk>${java.version}</targetJdk>
                            <rulesets>
                                <ruleset>${project.basedir}/pmd/pmd-rules.xml</ruleset>
                            </rulesets>
                            <failOnViolation>true</failOnViolation>
                        </configuration>
                        <executions>
                            <execution>
                                <id>pmd-check</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Findbugs static analysis plugin that inspects the bytecode representation to look for known bugs -->
        <profile>
            <id>findbugs</id>
            <activation>
                <property>
                    <name>!isolated</name><!-- Profile is active unless -Disolated is specified -->
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- Enable required lifecycle -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-compile</id>
                                <phase>compile</phase>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>findbugs-maven-plugin</artifactId>
                        <version>3.0.4</version>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <effort>Max</effort>
                            <threshold>Low</threshold>
                            <failOnError>true</failOnError>
                            <findbugsXmlOutputDirectory>${project.build.directory}/findbugs</findbugsXmlOutputDirectory>
                            <excludeFilterFile>${project.basedir}/findbugs/findbugs-excludes.xml</excludeFilterFile>
                        </configuration>
                        <executions>
                            <execution>
                                <id>findbugs-check</id>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Mutation testing for the domain and application layers, used to ensure we have test coverage -->
        <profile>
            <id>pitest</id>
            <build>
                <plugins>
                    <!-- Enable required lifecycle -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-compile</id>
                                <phase>compile</phase>
                            </execution>
                            <execution>
                                <id>default-testCompile</id>
                                <phase>test-compile</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-resources</id>
                                <phase>process-resources</phase>
                            </execution>
                            <execution>
                                <id>default-testResources</id>
                                <phase>process-test-resources</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-maven</artifactId>
                        <configuration>
                            <skip>${skipTests}</skip>
                            <timestampedReports>false</timestampedReports>
                            <timeoutConstant>3000</timeoutConstant>
                            <timeoutFactor>1.5</timeoutFactor>
                            <threads>1</threads><!-- This is needed because the build is not thread safe. Hopefully using withHistory will speed up the builds enough. -->
                            <jvmArgs>
                                <!-- Ensure the "real" yatspec reports do not get overwritten! -->
                                <jvmArg>-Dyatspec.output.dir=${project.build.directory}/pit-reports/yatspec</jvmArg>
                                <jvmArg>-Dlog4j.log.dir=${project.build.directory}/pit-reports/logs</jvmArg>
                                <jvmArg>-Dproject.version=${project.version}</jvmArg>
                                <jvmArg>-Duser.timezone=Europe/London</jvmArg>
                                <jvmArg>-Dapplication.properties.file=${project.build.testOutputDirectory}/test.properties</jvmArg>
                            </jvmArgs>
                            <verbose>false</verbose><!-- Set to 'true' to help debug the build -->
                            <environmentVariables>
                                <NAMESPACE>surefireunittests</NAMESPACE>
                            </environmentVariables>
                            <targetClasses>
                                <targetClass>${root.package}.*</targetClass>
                            </targetClasses>
                            <targetTests>
                                <targetTest>${root.package}.*</targetTest>
                                <targetTest>acceptancetests.*</targetTest>
                            </targetTests>
                            <mutators>
                                <mutator>CONDITIONALS_BOUNDARY</mutator>
                                <mutator>REMOVE_CONDITIONALS</mutator>
                                <mutator>INCREMENTS</mutator>
                                <mutator>INVERT_NEGS</mutator>
                                <mutator>MATH</mutator>
                                <mutator>NEGATE_CONDITIONALS</mutator>
                                <mutator>RETURN_VALS</mutator>
                                <mutator>VOID_METHOD_CALLS</mutator>
                            </mutators>
                            <maxSurviving>2</maxSurviving>
                            <excludedClasses>
                                <!-- Add excluded classes here if you TEMPORARILY need to get a green build without full coverage. You can use * as a wildcard. -->
                                <!--<excludedClass>com.hanfak.<artifactId>.<class></excludedClass> -->
                            </excludedClasses>
                        </configuration>
                        <executions>
                            <execution>
                                <id>domain-coverage</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>mutationCoverage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Check for updates -->
        <profile>
            <id>check-for-updates</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>versions-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>check-for-dependency-updates</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>display-dependency-updates</goal>
                                    <goal>display-plugin-updates</goal>
                                    <goal>display-property-updates</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


	<repositories>
		<repository>
			<id>repo.bodar.com</id>
			<url>http://repo.bodar.com</url>
		</repository>
	</repositories>

	<dependencies>
		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj.version}</version>
			<scope>test</scope>
		</dependency>
		<!--Acceptance testing library-->
		<dependency>
			<groupId>com.googlecode.yatspec</groupId>
			<artifactId>yatspec</artifactId>
			<version>${yatspec.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>
        <dependency>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-maven</artifactId>
            <version>1.4.3</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>versions-maven-plugin</artifactId>
            <version>2.7</version>
        </dependency>


	</dependencies>

</project>
